syntax = "proto3";

package users;

message UsersQuery {
  optional string search = 1;
  optional string username = 2;
  optional string email = 3;
  optional string role = 4;
  optional bool active = 5;
  optional int32 skip = 6;
  optional int32 limit = 7;
}

message UserInstance {
  string id = 1;
  string username = 2;
  string email = 3;
  repeated string roles = 4;
  bool isActive = 5;
  string createdAt = 6;
  string updatedAt = 7;
}

message UserList {
  repeated UserInstance data = 1;
  int32 total = 2;
  int32 skip = 3;
  int32 limit = 4;
}

message CreateUserRequest {
  string username = 1;
  string email = 2;
  string password = 3;
  optional string role = 4;
}

message CreateUserResponse {
  UserInstance user = 1;
}

message GetUserRequest {
  optional string id = 1;
  optional string username = 2;
  optional string email = 3;
  optional string clientId = 4;
}

message GetUserResponse {
  UserInstance user = 1;
}

message DeactivateUserResponse {
  UserInstance user = 1;
}

message ActivateUserResponse {
  UserInstance user = 1;
}

message SetPasswordRequest {
  string id = 1;
  string password = 2;
}

message SetPasswordResponse {
  UserInstance user = 1;
}

message GenerateClientSecretResponse {
  string clientSecret = 1;
}

message ClientIdResponse {
  string clientId = 1;
}

message RefreshTokenRequest {
  string id = 1;
  string refreshToken = 2;
}

message RefreshTokenResponse {
  optional UserInstance user = 1;
}

service UserService {
  rpc GetUsers(UsersQuery) returns (UserList);
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  rpc DeactivateUser(GetUserRequest) returns (DeactivateUserResponse);
  rpc ActivateUser(GetUserRequest) returns (ActivateUserResponse);
  rpc SetPassword(SetPasswordRequest) returns (SetPasswordResponse);
  rpc GenerateClientSecret(GetUserRequest) returns (GenerateClientSecretResponse);
  rpc GetClientId(GetUserRequest) returns (ClientIdResponse);
  rpc RegisterRefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
  rpc RevokeRefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
}
