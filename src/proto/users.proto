syntax = "proto3";

package users;

import "commons.proto";
import "google/protobuf/empty.proto";

message UsersQuery {
  optional string search = 1;
  optional string username = 2;
  optional string email = 3;
  optional string role = 4;
  optional bool active = 5;
  optional int32 skip = 6;
  optional int32 limit = 7;
}

message InternalUserInstance {
  string id = 1;
  string username = 2;
  string email = 3;
  repeated string roles = 4;
  bool isActive = 5;
  string password = 6;
  string emailVerifiedAt = 7;
  string clientId = 8;
  string clientSecret = 9;
  string refreshToken = 10;
  string passwordRecoveryToken = 11;
  repeated commons.WalletInstance wallets = 12;
  string createdAt = 13;
  string updatedAt = 14;
}

message UserList {
  repeated commons.UserInstance data = 1;
  int32 count = 2;
  int32 skip = 3;
  int32 limit = 4;
}

message CreateUserRequest {
  string username = 1;
  string email = 2;
  string password = 3;
  optional string role = 4;
}

message GetUserRequest {
  optional string id = 1;
  optional string username = 2;
  optional string email = 3;
  optional string clientId = 4;
}

message SetPasswordRequest {
  string id = 1;
  string password = 2;
}

message GenerateClientSecretResponse {
  string clientSecret = 1;
}

message ClientIdResponse {
  string clientId = 1;
}

message RegisteRefreshTokenRequest {
  string id = 1;
  string refreshToken = 2;
}

message RevokeRefreshTokenRequest {
  string id = 1;
}

message UserIsActiveRequest {
  string id = 1;
}

message UserIsActiveResponse {
  bool isActive = 1;
}

message UpdateUserRequest {
  optional string id = 1;
  optional string username = 2;
  optional string email = 3;
  optional string password = 4;
  optional string emailVerifiedAt = 5;
  optional string passwordRecoveryToken = 6;
}

message EmailAndPasswordRequest {
  string email = 1;
}

message VerifyEmailRequest {
  string token = 1;
}

message VerifyEmailAndRecoveryPassResponse {
  string message = 1;
  string redirectTo = 2;
}

message recoveryPasswordRequest {
  string token = 1;
  string password = 2;
}

message VerifyTokenPasswordRequest {
  string token = 1;
}

message VerifyTokenPasswordResponse {
  bool isValid = 1;
}

service UserService {
  rpc GetUsers(UsersQuery) returns (UserList);
  rpc CreateUser(CreateUserRequest) returns (commons.UserInstance);
  rpc GetUser(GetUserRequest) returns (commons.UserInstance);
  rpc DeactivateUser(GetUserRequest) returns (commons.UserInstance);
  rpc ActivateUser(GetUserRequest) returns (commons.UserInstance);
  rpc SetPassword(SetPasswordRequest) returns (commons.UserInstance);
  rpc GenerateClientSecret(GetUserRequest) returns (GenerateClientSecretResponse);
  rpc GetClientId(GetUserRequest) returns (ClientIdResponse);
  rpc RegisterRefreshToken(RegisteRefreshTokenRequest) returns (commons.UserInstance);
  rpc RevokeRefreshToken(RevokeRefreshTokenRequest) returns (commons.UserInstance);
  rpc GetInternalUserMessage(GetUserRequest) returns (InternalUserInstance);
  rpc SeedAdminUser(google.protobuf.Empty) returns (commons.UserInstance);
  rpc UserIsActive(UserIsActiveRequest) returns (UserIsActiveResponse);
  rpc UpdateUser (UpdateUserRequest) returns (commons.UserInstance);
  rpc requestEmailConfirmation (EmailAndPasswordRequest) returns (google.protobuf.Empty);
  rpc verifyEmail (VerifyEmailRequest) returns (VerifyEmailAndRecoveryPassResponse);
  rpc forgotPassword (EmailAndPasswordRequest) returns (google.protobuf.Empty);
  rpc recoveryPassword (recoveryPasswordRequest) returns (VerifyEmailAndRecoveryPassResponse);
  rpc VerifyTokenPassword (VerifyTokenPasswordRequest) returns (VerifyTokenPasswordResponse);
}
